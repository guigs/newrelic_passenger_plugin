#!/usr/bin/env ruby

# Passenger agent to monitor status and memory status of passenger servers

require "rubygems"
require "bundler/setup"
require "newrelic_plugin"
require "nokogiri"
require File.join(File.dirname(__FILE__), 'lib/status_parser')
require File.join(File.dirname(__FILE__), 'test/test_helper')

module PassengerAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid 'br.com.sapiente.passenger'
    agent_version '1.0.0'
    agent_config_options :passenger_status
    # Name of instance that will display in New Relic
    agent_human_labels("Passenger") { "#{`hostname`}" }

    # Send stats to New Relic
    def poll_cycle

      #initialize
      @status = Status.new(run_command(passenger_status))

      # CPU usage by app
      @status.cpu.each do |app, cpu_usage|
        report_metric "passenger/cpu/#{app}", "%", cpu_usage
      end

      # Memory usage by app
      @status.memory.each do |app, memory_usage|
        report_metric "passenger/memory/#{app}", "MB", memory_usage / 1024
      end

      # Queue by app
      @status.queue.each do |app, queue|
        report_metric "passenger/queue/#{app}", "Requests", queue
      end
      report_metric "passenger/queue/global", "Requests", @status.global_queue

      # Sessions by app
      @status.sessions.each do |app, sessions|
        report_metric "passenger/sessions/#{app}", "Sessions", sessions
      end

      # Processes by app
      @status.processes.each do |app, processes|
        report_metric "passenger/processes/#{app}", "Processes", processes
      end

      # Global processes
      report_metric "passenger/global_processes/max", "Processes", @status.max
      report_metric "passenger/global_processes/running", "Processes", @status.current

    end

    private

    # Run command on passenger server to get data
    def run_command(command)

      result = `#{command}`
      unless $?.success?
        $stderr.puts "command: #{command} failed"
        exit 1
      end
      result
    end

    # Register this agent with the component.
    NewRelic::Plugin::Setup.install_agent :passenger, PassengerAgent

    # Launch the agent; this never returns.
    NewRelic::Plugin::Run.setup_and_run
  end

end
